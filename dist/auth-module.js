(function(){this.authModule=angular.module("myApp.auth",["myApp.common","angular-flash.service","myApp.i18n","ngRoute"]).config(function($routeProvider){return $routeProvider.when("/login",{templateUrl:"/assets/lib/angular-auth-web/login/login.html"})})}).call(this),function(){authModule.constant("UserLevelRoles",[{key:"admin",value:"role_admin"}]),authModule.constant("UserLevelPermissions",{nav_user:["admin"]})}.call(this),function(){var PermissionModel;PermissionModel=function(){function PermissionModel(){this.roles=[],this.permissions=[]}return PermissionModel.prototype.appendRoles=function(newRoles){var i,len,role;for(i=0,len=newRoles.length;len>i;i++)role=newRoles[i],this.roles.push(role);return this.roles},PermissionModel.prototype.appendPermissions=function(newPermissions){var permission,roles;for(permission in newPermissions)roles=newPermissions[permission],this.permissions[permission]=roles;return this.permissions},PermissionModel}(),authModule.factory("PermissionModel",function(){return new PermissionModel})}.call(this),function(){var UserModel,indexOf=[].indexOf||function(item){for(var i=0,l=this.length;l>i;i++)if(i in this&&this[i]===item)return i;return-1};UserModel=function(){function UserModel($log1,PermissionModel1){this.$log=$log1,this.PermissionModel=PermissionModel1,this.users=[],this.authenticatedUser,this.bootstrapped=!1}return UserModel.prototype.isAdmin=function(){return this.userHasRole("admin")},UserModel.prototype.isExternal=function(){return this.userHasRole("external")},UserModel.prototype.hasId=function(id){return null==this.authenticatedUser?!1:id===this.authenticatedUser._id},UserModel.prototype.size=function(){return this.users.length},UserModel.prototype.clean=function(){return this.users=[]},UserModel.prototype.userHasOneOfRoles=function(roles){var currentRole,i,len;for(i=0,len=roles.length;len>i;i++)if(currentRole=roles[i],this.userHasRole(currentRole))return!0;return!1},UserModel.prototype.userHasRole=function(role){var i,len,ref,userRole;if(null==this.authenticatedUser)return!1;for(ref=this.authenticatedUser.roles,i=0,len=ref.length;len>i;i++)if(userRole=ref[i],userRole===role)return!0;return!1},UserModel.prototype.userHasPermission=function(permission){var i,j,len,len1,ref,role,roles,userRole;if(null==this.authenticatedUser)return!1;if(this.authenticatedUser.hasOwnProperty("permissions"))return this.$log.debug("Application manages permissions explictly (on the server side)"),indexOf.call(this.authenticatedUser.permissions,permission)>=0;if(this.$log.debug("Application does not manage permissions explicitly - they will be derrived from roles"),roles=this.PermissionModel.permissions[permission],null===roles||void 0===roles)return this.$log.error("Permission "+permission+" is not defined"),!1;for(i=0,len=roles.length;len>i;i++)for(role=roles[i],ref=this.authenticatedUser.roles,j=0,len1=ref.length;len1>j;j++)if(userRole=ref[j],userRole===role)return!0;return!1},UserModel}(),authModule.factory("UserModel",function($log,PermissionModel){return new UserModel($log,PermissionModel)})}.call(this),function(){var AuthService;AuthService=function(){function AuthService($log1,$q,flash,$location,HttpService,UserModel,UserConfig){this.$log=$log1,this.$q=$q,this.flash=flash,this.$location=$location,this.HttpService=HttpService,this.UserModel=UserModel,this.UserConfig=UserConfig,this.$log=$log.getInstance("Nutstrap"),this.$log.debug("constructing")}return AuthService.prototype.login=function(userlogin){var deferred;return this.$log.debug("login"),deferred=this.$q.defer(),this.HttpService.post(this.UserConfig.API_LOGIN,userlogin).then(function(_this){return function(data){return _this.flash.i18nSuccess("login_success"),_this.UserModel.authenticatedUser=data,deferred.resolve(data)}}(this),function(_this){return function(error){return _this.flash.i18nError("login_failure"),_this.UserModel.authenticatedUser=void 0,deferred.reject(error)}}(this)),deferred.promise},AuthService.prototype.logout=function(){var deferred;return this.$log.debug("logout"),deferred=this.$q.defer(),this.HttpService.get(this.UserConfig.API_LOGOUT).then(function(_this){return function(data){return _this.flash.i18nSuccess("logout_success"),_this.UserModel.authenticatedUser=void 0,deferred.resolve(data)}}(this),function(_this){return function(error){return _this.flash.i18nError("logout_failure"),_this.UserModel.authenticatedUser=void 0,deferred.reject(error)}}(this)),deferred.promise},AuthService}(),authModule.service("AuthService",AuthService)}.call(this),function(){var AuthCtrl;AuthCtrl=function(){function AuthCtrl($log1,$location,UserModel){this.$log=$log1,this.$location=$location,this.UserModel=UserModel,this.$log=$log.getInstance("AuthCtrl"),this.$log.debug("constructing"),this.UserModel.authenticatedUser&&-1!==this.$location.path().indexOf("login")&&this.$location.path("/")}return AuthCtrl}(),authModule.controller("AuthCtrl",AuthCtrl)}.call(this),function(){var LoginCtrl;LoginCtrl=function(){function LoginCtrl($log1,$location,$rootScope,AuthService,UserModel,flash){this.$log=$log1,this.$location=$location,this.$rootScope=$rootScope,this.AuthService=AuthService,this.UserModel=UserModel,this.flash=flash,this.$log=$log.getInstance("LoginCtrl"),this.$log.debug("constructing"),this.userlogin={}}return LoginCtrl.prototype.login=function(){return this.$log.info("login for user: "+this.userlogin.username),this.AuthService.login(this.userlogin).then(function(_this){return function(data){var search;return _this.$log.debug("AuthService.login promise OK"),search=_this.$location.search(),_this.$location.path(search.action?search.action:"/").search({}),_this.flash.i18nSuccess("login_successful")}}(this))},LoginCtrl}(),authModule.controller("LoginCtrl",LoginCtrl)}.call(this),function(){authModule.config(function($provide){return $provide.factory("FlashResponseHttpInterceptor",function($q,$log,$location,$injector,UserModel){return{responseError:function(rejection){var ref,ref1,ref2;return this.$log=$log.getInstance("AuthService"),403===(ref=rejection.status)&&"/login"!==rejection.config.url&&(this.$log.info("403 and not /login. Redirect to /"),$location.path("/")),403===(ref1=rejection.status)&&"/login"===rejection.config.url&&($injector.get("flash").i18nError("login_failure"),this.$log.info("403 and /login. Redirect to /login"),UserModel.authenticatedUser=void 0,$location.path("/login")),401===(ref2=rejection.status)&&"/authenticated"!==rejection.config.url&&(this.$log.info("401 and not /authenticated. Redirect to / with message"),$injector.get("flash").i18nError("user_action_unauthorised_session_lost"),UserModel.authenticatedUser=void 0,$location.path("/login")),$q.reject(rejection)}}})})}.call(this),function(){authModule.directive("hasPermission",function($log,UserModel,PermissionModel){return{restrict:"A",link:function(scope,elm,attrs,ctrl){return scope.$watch(function(){return UserModel.authenticatedUser},function(newValue,oldValue){var accessSuccessful,allowedRoles,ref;if(elm.removeClass("ng-show"),elm.addClass("ng-hide"),UserModel.authenticatedUser){if(allowedRoles=PermissionModel.roles.map(function(kv){return kv.key}),!(null!=allowedRoles?allowedRoles.length:void 0))return $log.error("AllowedRoles not found!");if(!(null!=(ref=attrs.hasPermission)?ref.length:void 0))return $log.error("Attribute value invalid "+attrs.hasPermission);if(accessSuccessful=UserModel.userHasPermission(attrs.hasPermission))return elm.removeClass("ng-hide"),elm.addClass("ng-show")}})}}})}.call(this);