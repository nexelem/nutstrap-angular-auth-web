// Generated by CoffeeScript 1.8.0

/*
    This directive watches the authenticated user and raises security errors
 */

(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  authModule.directive('hasPermission', function($log, UserModel, PermissionModel) {
    return {
      restrict: 'A',
      link: function(scope, elm, attrs, ctrl) {
        return scope.$watch(function() {
          return UserModel.authenticatedUser;
        }, function(newValue, oldValue) {
          var allowedRoles, role, roles, _i, _len, _ref;
          allowedRoles = PermissionModel.roles.map(function(kv) {
            return kv.key;
          });
          elm.removeClass("ng-show");
          elm.addClass("ng-hide");
          if (!UserModel.authenticatedUser) {
            return;
          }
          if (!(allowedRoles != null ? allowedRoles.length : void 0)) {
            return $log.error("AllowedRoles not found!");
          }
          if (!((_ref = attrs.hasPermission) != null ? _ref.length : void 0)) {
            return $log.error("Attribute value invalid " + attrs.hasPermission);
          }
          roles = PermissionModel.permissions[attrs.hasPermission];
          if (roles === null || roles === void 0) {
            return $log.error("Permission " + attrs.hasPermission + " is not defined");
          }
          for (_i = 0, _len = roles.length; _i < _len; _i++) {
            role = roles[_i];
            if (!(__indexOf.call(allowedRoles, role) >= 0)) {
              return $log.error("Unknown role " + role);
            }
          }
          if (UserModel.userHasOneOfRoles(roles)) {
            elm.removeClass("ng-hide");
            return elm.addClass("ng-show");
          }
        });
      }
    };
  });

}).call(this);
